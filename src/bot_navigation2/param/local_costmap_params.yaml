
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0  # 更新频率，单位为Hz，控制局部代价地图更新的频率
      publish_frequency: 5.0  # 发布频率，单位为Hz，控制局部代价地图发布的频率
      global_frame: odom  # 设置全局坐标系为"odom"，这通常是里程计坐标系
      robot_base_frame: base_link  # 机器人本体坐标系，通常为"base_link"
      use_sim_time: False  # 是否使用仿真时间，通常在仿真环境中为True。设置为False表示使用系统时间
      rolling_window: true  # 是否启用滚动窗口模式，表示局部地图是一个不断更新的窗口
      width: 3  # 局部代价地图的宽度，单位为米
      height: 3  # 局部代价地图的高度，单位为米
      resolution: 0.05  # 局部代价地图的分辨率，单位为米，表示每个网格的大小
      robot_radius: 0.3  # 机器人半径，单位为米，用于在代价地图中考虑机器人的尺寸
      plugins: ["obstacle_layer", "voxel_layer", "inflation_layer"]  # 局部代价地图中使用的插件列表

      # InflationLayer插件，用于扩展障碍物的影响区域
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 使用的插件类型
        inflation_radius: 18.0  # 通常会将障碍物扩展一定的半径，以防止机器人碰撞
        cost_scaling_factor: 0.3  # 代价扩展因子，控制障碍物周围区域的代价值

      # ObstacleLayer插件，用于检测并标记障碍物
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 使用的插件类型
        enabled: True  # 启用障碍物层
        observation_sources: scan  # 从扫描数据中获取障碍物信息 ///////////////明天调这里
        scan:
          topic: /merged_scan  # 激光雷达数据的主题，通常是合并的扫描数据
          max_obstacle_height: 2.0  # 障碍物的最大高度，超过此高度的物体不会被认为是障碍物
          clearing: True  # 启用清除，表示当障碍物移除时，地图中的代价也会被清除
          marking: True  # 启用标记，表示障碍物会被标记在代价地图中
          data_type: "LaserScan"  # 数据类型，这里使用"LaserScan"

      # VoxelLayer插件，用于根据扫描数据创建体素地图
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"  # 使用的插件类型
        enabled: True  # 启用体素层
        publish_voxel_map: True  # 发布体素地图
        origin_z: 0.0  # 体素地图的原点高度，通常为0，表示地图的地面
        z_resolution: 0.05  # 体素的Z轴分辨率，控制体素的高度分辨率
        z_voxels: 16  # Z轴体素的数量，控制体素在垂直方向上的分辨率
        max_obstacle_height: 2.0  # 体素层中障碍物的最大高度，超过此高度的物体不会被认为是障碍物
        mark_threshold: 0  # 用于标记障碍物的阈值
        observation_sources: scan  # 从哪个数据源获取障碍物信息，这里是合并扫描数据
        scan:
          topic: /merged_scan  # 激光扫描数据的主题
          max_obstacle_height: 2.0  # 设置最大障碍物高度
          clearing: True  # 启用清除
          marking: True  # 启用标记
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 3.0  # 光线追踪的最大范围，表示扫描数据的最大有效距离
          raytrace_min_range: 0.0  # 光线追踪的最小范围，表示扫描数据的最小有效距离
          obstacle_max_range: 2.5  # 障碍物检测的最大有效范围
          obstacle_min_range: 0.0  # 障碍物检测的最小有效范围

      # StaticLayer插件，用于处理静态地图信息
      static_layer:
        map_subscribe_transient_local: True  # 启用临时本地订阅，表示动态获取地图信息

      always_send_full_costmap: True  # 是否总是发送完整的代价地图，通常为了减少传输的频率

  # 代价地图客户端
  local_costmap_client:
    ros__parameters:
      use_sim_time: False  # 是否使用仿真时间，通常在仿真环境中为True。设置为False表示使用系统时间

  # 代价地图节点
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False  # 是否使用仿真时间，通常在仿真环境中为True。设置为False表示使用系统时间

